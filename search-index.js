var searchIndex = {};
searchIndex["eclectic"] = {"doc":"Collection traits for generic programming.","items":[[0,"map","eclectic","Maps.",null,null],[4,"Entry","eclectic::map","A map entry.",null,null],[13,"Occupied","","An occupied map entry.",0,null],[13,"Vacant","","A vacant map entry.",0,null],[8,"Base","","Map functionality that is independent of an additional type parameter.",null,null],[16,"Key","","The type of the map&#39;s keys.",1,null],[16,"Value","","The type of the map&#39;s values.",1,null],[10,"iter","","Returns an iterator that yields references to the map&#39;s keys and references to their\nvalues.",1,null],[10,"iter_mut","","Returns an iterator that yields references to the map&#39;s keys and mutable references to\ntheir values.",1,null],[10,"insert","","Inserts the given key and value into the map without replacing an equivalent key.",1,null],[10,"entry","","Returns the entry in the map for the given key.",1,null],[8,"Map","","A map.",null,null],[11,"contains_key","","Checks if the map contains a key that is equivalent to the given key.",2,null],[10,"get","","Returns a reference to the value of the key in the map that is equivalent to the given\nkey.",2,null],[10,"get_mut","","Returns a mutable reference to the value of the key in the map that is equivalent to\nthe given key.",2,null],[10,"remove","","Removes the key in the map that is equivalent to the given key and returns its value.",2,null],[8,"OccupiedEntry","","An occupied map entry.",null,null],[16,"Key","","The type of the entry&#39;s key.",3,null],[16,"Value","","The type of the entry&#39;s value.",3,null],[16,"MutValue","","The type of the mutable reference to the entry&#39;s value with the same lifetime as the\nmap.",3,null],[10,"get","","Returns a reference to the entry&#39;s value.",3,null],[10,"get_mut","","Returns a mutable reference to the entry&#39;s value.",3,null],[10,"into_mut","","Returns a mutable reference to the entry&#39;s value with the same lifetime as the map.",3,{"inputs":[{"name":"box"}],"output":{"name":"mutvalue"}}],[10,"remove","","Removes the entry from the map and returns its value.",3,{"inputs":[{"name":"box"}],"output":{"name":"value"}}],[8,"VacantEntry","","A vacant entry.",null,null],[16,"Key","","The type of the entry&#39;s key.",4,null],[16,"Value","","The type of the entry&#39;s value.",4,null],[16,"MutValue","","The type of the mutable reference to the entry&#39;s value with the same lifetime as the\nmap.",4,null],[10,"insert","","Inserts the entry into the map with the given value.",4,{"inputs":[{"name":"box"},{"name":"value"}],"output":{"name":"mutvalue"}}],[11,"or_insert","","Ensures that the entry is occupied by inserting it into the map with the given value if\nit is vacant.",0,null],[11,"or_insert_with","","Ensures that the entry is occupied by inserting it into the map with the result of the\ngiven function if it is vacant.",0,null],[0,"set","eclectic","Sets.",null,null],[8,"Base","eclectic::set","Set functionality that is independent of an additional type parameter.",null,null],[10,"is_disjoint","","Checks if the set is disjoint from the given set.",5,null],[10,"is_subset","","Checks if the set is a subset of the given set.",5,null],[11,"is_superset","","Checks if the set is a superset of the given set.",5,null],[10,"insert","","Inserts the given item into the set without replacement.",5,null],[10,"replace","","Inserts the given item into the set with replacement.",5,null],[8,"Set","","A set.",null,null],[11,"contains","","Checks if the set contains an item that is equivalent to the given item.",6,null],[10,"get","","Returns a reference to the item in the set that is equivalent to the given item.",6,null],[11,"remove","","Removes the item in the set that is equivalent to the given item.",6,null],[10,"take","","Removes the item in the set that is equivalent to the given item and returns it.",6,null],[8,"Mutate","eclectic","A marker that indicates that a collection supports the mutation of its items.",null,null],[8,"AddRemove","","A marker that indicates that a collection supports the insertion of new items and the removal\nof existing items.",null,null],[8,"Collection","","A collection.",null,null],[16,"Item","","The type of the collection&#39;s items.",7,null],[10,"len","","Returns the number of items in the collection.",7,null],[11,"is_empty","","Checks if the collection contains no items.",7,null],[10,"capacity","","Returns the number of items the collection can hold without reallocating.",7,null],[11,"append","","Drains the given collection and inserts its items into the collection.",7,null],[10,"extend_object","","Inserts the items yielded by the given iterator into the collection.",7,null],[11,"clear","","Removes all items from the collection.",7,null],[10,"drain","","Removes all items from the collection and returns an iterator that yields them.",7,null],[10,"reserve","","Reserves capacity for the given number of additional items to be inserted into the\ncollection.",7,null],[10,"shrink_to_fit","","Shrinks the collection&#39;s capacity as much as possible.",7,null],[11,"with_capacity","","Returns a new collection with the given capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into_vec","","Converts the collection into a vector.",7,null],[8,"Iter","","A collection that supports by-reference iteration.",null,null],[10,"iter","","Returns an iterator that yields references to the collection&#39;s items.",8,null],[10,"iter_mut","","Returns an iterator that yields mutable references to the collection&#39;s items.",8,null],[8,"DrainRange","","A collection that supports draining a range of its items.",null,null],[10,"drain_range","","Removes all items from the collection that lie in the given range and returns an iterator\nthat yields them.",9,null],[8,"List","","A list.",null,null],[10,"get","","Returns a reference to the item at the given index in the list.",10,null],[10,"get_mut","","Returns a mutable reference to the item at the given index in the list.",10,null],[10,"swap","","Swaps the items at the given indices in the list.",10,null],[11,"reverse","","Reverses the order of the items in the list.",10,null],[11,"first","","Returns a reference to the first item in the list.",10,null],[11,"first_mut","","Returns a mutable reference to the first item in the list.",10,null],[11,"last","","Returns a reference to the last item in the list.",10,null],[11,"last_mut","","Returns a mutable reference to the last item in the list.",10,null],[11,"push","","Pushes the given item onto the back of the list.",10,null],[10,"insert","","Inserts the given item into the list at the given index.",10,null],[11,"pop","","Removes the last item in the list and returns it.",10,null],[10,"remove","","Removes the item at the given index in the list and returns it.",10,null],[10,"swap_remove","","Removes the item at the given index in the list and returns it, replacing it with the last\nitem in the list.",10,null],[11,"truncate","","Ensures that the list&#39;s length is no more than the given length by removing the\ncorresponding number of items from the back.",10,null],[11,"split_off","","Splits the list in two at the given index.",10,null],[8,"Queue","","A queue.",null,null],[10,"push","","Pushes the given item onto the queue.",11,null],[10,"front","","Returns a reference to the item at the front of the queue.",11,null],[10,"pop_front","","Removes the item at the front of the queue and returns it.",11,null],[8,"FifoQueue","","A first-in, first-out queue.",null,null],[10,"front_mut","","Returns a mutable reference to the item at the front of the queue.",12,null],[8,"PrioQueue","","A priority queue.",null,null],[11,"push_pop_front","","Pushes the given item onto the queue, then removes the item at the front of the queue and\nreturns it.",13,null],[11,"replace_front","","Removes the item at the front of the queue, then pushes the given item onto the queue.",13,null],[8,"Deque","","A double-ended queue.",null,null],[10,"back","","Returns a reference to the item at the back of the deque.",14,null],[10,"pop_back","","Removes the item at the back of the deque and returns it.",14,null],[8,"FifoDeque","","A double-ended first-in, first-out queue.",null,null],[10,"push_front","","Pushes the given item onto the front of the deque.",15,null],[10,"back_mut","","Returns a mutable reference to the item at the back of the deque.",15,null],[8,"PrioDeque","","A double-ended priority queue.",null,null],[11,"push_pop_back","","Pushes the given item onto the deque, then removes the item at the back of the deque and\nreturns it.",16,null],[11,"replace_back","","Removes the item at the back of the deque, then pushes the given item onto the deque.",16,null]],"paths":[[4,"Entry"],[8,"Base"],[8,"Map"],[8,"OccupiedEntry"],[8,"VacantEntry"],[8,"Base"],[8,"Set"],[8,"Collection"],[8,"Iter"],[8,"DrainRange"],[8,"List"],[8,"Queue"],[8,"FifoQueue"],[8,"PrioQueue"],[8,"Deque"],[8,"FifoDeque"],[8,"PrioDeque"]]};
initSearch(searchIndex);
